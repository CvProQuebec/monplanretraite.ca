// src/features/retirement/services/SecurityService.ts
import CryptoJS from 'crypto-js';
import { DataCollectionService, CompleteBackupData } from './DataCollectionService';

// Configuration s√©curis√©e
const PBKDF2_ITERATIONS = 100000; // S√©curit√© renforc√©e

// Correction de la fonction generateSalt
const generateSalt = () => {
  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {
    return Array.from(crypto.getRandomValues(new Uint8Array(16)))
      .map(b => b.toString(16).padStart(2, '0')).join('');
  } else {
    // Fallback pour les navigateurs plus anciens
    return Array.from({ length: 16 }, () => 
      Math.floor(Math.random() * 256).toString(16).padStart(2, '0')
    ).join('');
  }
};

export interface EncryptedData {
  data: string;
  timestamp: number;
  version: string;
}

export interface BackupMetadata {
  createdAt: number;
  updatedAt: number;
  version: string;
  deviceId: string;
  checksum?: string;
  id?: string;
  timestamp?: number;
  isAutoBackup?: boolean;
  description?: string;
  size?: number;
}

export interface RetirementBackupFile {
  metadata: BackupMetadata;
  encryptedData: string;
  salt: string; // Ajout du salt pour permettre le d√©chiffrement
  checksum: string;
}

export class SecurityService {
  private static readonly APP_VERSION = '1.0.0';
  
  /**
   * G√©n√®re une cl√© de chiffrement bas√©e sur un mot de passe utilisateur
   */
  private static generateEncryptionKey(userPassword: string, salt: string): string {
    return CryptoJS.PBKDF2(userPassword, salt, {
      keySize: 256/32,
      iterations: PBKDF2_ITERATIONS
    }).toString();
  }

  /**
   * G√©n√®re une nouvelle cl√© de chiffrement avec un salt al√©atoire
   */
  private static generateNewEncryptionKey(userPassword: string): { key: string; salt: string } {
    const salt = generateSalt();
    const key = this.generateEncryptionKey(userPassword, salt);
    return { key, salt };
  }

  /**
   * Cr√©e les donn√©es de sauvegarde avec m√©tadonn√©es
   */
  static async createBackupData(data: any, userPassword: string, description?: string): Promise<RetirementBackupFile> {
    try {
      // Validation des donn√©es
      if (!this.validateDataIntegrity(data)) {
        throw new Error('Donn√©es invalides - impossible de sauvegarder');
      }

      // Chiffrement avec mot de passe utilisateur
      const { key: encryptionKey, salt } = this.generateNewEncryptionKey(userPassword);
      const jsonString = JSON.stringify(data);
      const encryptedData = CryptoJS.AES.encrypt(jsonString, encryptionKey).toString();
      
      // M√©tadonn√©es
      const metadata: BackupMetadata = {
        createdAt: Date.now(),
        updatedAt: Date.now(),
        version: this.APP_VERSION,
        deviceId: this.generateDeviceId(),
        checksum: this.generateHash(data),
        timestamp: Date.now(),
        isAutoBackup: false,
        description: description || 'Sauvegarde manuelle des donn√©es de retraite'
      };

      // Structure du fichier de sauvegarde
      const backupFile: RetirementBackupFile = {
        metadata,
        encryptedData,
        salt, // Stocker le salt pour le d√©chiffrement
        checksum: this.generateHash({ metadata, encryptedData, salt })
      };

      return backupFile;
    } catch (error) {
      console.error('Erreur lors de la cr√©ation des donn√©es de sauvegarde:', error);
      throw error;
    }
  }

  /**
   * Cr√©e une sauvegarde compl√®te de tous les modules
   */
  static async createCompleteBackup(userPassword: string, description?: string): Promise<RetirementBackupFile> {
    try {
      console.log('üîÑ Cr√©ation d\'une sauvegarde compl√®te de tous les modules...');
      
      // Collecter toutes les donn√©es de tous les modules
      const completeData = DataCollectionService.collectAllData();
      
      // Cr√©er la sauvegarde chiffr√©e
      const backupFile = await this.createBackupData(completeData, userPassword, description);
      
      console.log('‚úÖ Sauvegarde compl√®te cr√©√©e avec succ√®s');
      return backupFile;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de la sauvegarde compl√®te:', error);
      throw error;
    }
  }

  /**
   * Sauvegarde les donn√©es de retraite dans un fichier local
   */
  static async saveToLocalFile(data: any, userPassword: string, filename?: string, description?: string): Promise<void> {
    try {
      // Cr√©er les donn√©es de sauvegarde
      const backupFile = await this.createBackupData(data, userPassword, description);

      // T√©l√©chargement du fichier
      const blob = new Blob([JSON.stringify(backupFile, null, 2)], { 
        type: 'application/json' 
      });
      
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename || `retraite-backup-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

    } catch (error) {
      console.error('Erreur lors de la sauvegarde:', error);
      throw new Error(`Impossible de sauvegarder les donn√©es: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
  }

  /**
   * Charge et d√©chiffre un fichier local avec gestion robuste des erreurs
   */
  static async loadFromLocalFile(file: File, userPassword: string): Promise<any> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = (event) => {
        try {
          const content = event.target?.result as string;
          console.log('üìÅ Contenu du fichier lu:', content.substring(0, 200) + '...');
          
          // Essayer de parser le contenu
          let backupFile: any;
          try {
            backupFile = JSON.parse(content);
          } catch (parseError) {
            console.error('‚ùå Erreur de parsing JSON:', parseError);
            reject(new Error('Fichier JSON invalide - v√©rifiez le format'));
            return;
          }
          
          // D√âTECTION AUTOMATIQUE DU TYPE DE FICHIER
          console.log('üîç Analyse du type de fichier...');
          
          // CAS 1: Fichier de sauvegarde chiffr√© MonPlanRetraite
          if (backupFile.encryptedData && backupFile.salt && backupFile.metadata) {
            console.log('üîê Fichier de sauvegarde chiffr√© d√©tect√©');
            return this.loadEncryptedBackup(backupFile, userPassword, resolve, reject);
          }
          
          // CAS 2: Fichier JSON simple (donn√©es non chiffr√©es)
          if (backupFile.personalData || backupFile.retirement || backupFile.savings || backupFile.cashflow) {
            console.log('üìÑ Fichier JSON simple d√©tect√© - donn√©es non chiffr√©es');
            return this.loadSimpleJsonData(backupFile, resolve, reject);
          }
          
          // CAS 3: Ancien format de sauvegarde (compatibilit√©)
          if (backupFile.data && backupFile.timestamp) {
            console.log('üîÑ Ancien format de sauvegarde d√©tect√©');
            return this.loadLegacyBackup(backupFile, userPassword, resolve, reject);
          }
          
          // CAS 4: Format inconnu - essayer de charger directement
          console.log('‚ùì Format inconnu - tentative de chargement direct');
          return this.loadUnknownFormat(backupFile, resolve, reject);
          
        } catch (error) {
          console.error('‚ùå Erreur lors du chargement:', error);
          reject(error);
        }
      };
      
      reader.onerror = () => {
        reject(new Error('Erreur lors de la lecture du fichier'));
      };
      
      // Essayer diff√©rents encodages
      try {
        reader.readAsText(file, 'utf-8');
      } catch (encodingError) {
        console.warn('‚ö†Ô∏è Erreur avec UTF-8, essai avec encodage par d√©faut');
        reader.readAsText(file);
      }
    });
  }

  /**
   * Charge un fichier de sauvegarde chiffr√©
   */
  private static async loadEncryptedBackup(
    backupFile: RetirementBackupFile, 
    userPassword: string, 
    resolve: (data: any) => void, 
    reject: (error: Error) => void
  ) {
    try {
      // V√©rification de l'int√©grit√© du fichier
      const expectedChecksum = this.generateHash({
        metadata: backupFile.metadata,
        encryptedData: backupFile.encryptedData,
        salt: backupFile.salt
      });
      
      if (backupFile.checksum !== expectedChecksum) {
        console.warn('‚ö†Ô∏è Checksum invalide - fichier potentiellement corrompu');
        // Continuer quand m√™me pour la compatibilit√©
      }

      console.log('üîê Tentative de d√©chiffrement...');
      
      // D√©chiffrement avec mot de passe utilisateur
      const encryptionKey = this.generateEncryptionKey(userPassword, backupFile.salt);
      console.log('üîë Cl√© de chiffrement g√©n√©r√©e avec salt, longueur:', encryptionKey.length);
      
      try {
        const bytes = CryptoJS.AES.decrypt(backupFile.encryptedData, encryptionKey);
        console.log('üîì Donn√©es d√©chiffr√©es (bytes):', bytes);
        
        // V√©rifier si le d√©chiffrement a produit des donn√©es
        if (!bytes || bytes.sigBytes <= 0) {
          throw new Error('Mot de passe incorrect - aucune donn√©e d√©chiffr√©e');
        }
        
        const decryptedString = bytes.toString(CryptoJS.enc.Utf8);
        console.log('üìù Conversion UTF-8 r√©ussie, longueur:', decryptedString.length);
        
        if (!decryptedString || decryptedString.length === 0) {
          throw new Error('Mot de passe incorrect - donn√©es vides apr√®s d√©chiffrement');
        }
        
        console.log('‚úÖ Donn√©es d√©chiffr√©es avec succ√®s, longueur:', decryptedString.length);
        
        const data = JSON.parse(decryptedString);
        
        // Validation des donn√©es d√©chiffr√©es
        if (!this.validateDataIntegrity(data)) {
          throw new Error('Donn√©es invalides dans le fichier');
        }

        // V√©rification du checksum des donn√©es
        if (backupFile.metadata.checksum && 
            !this.verifyHash(data, backupFile.metadata.checksum)) {
          console.warn('‚ö†Ô∏è Checksum des donn√©es invalide - donn√©es potentiellement corrompues');
          // Continuer quand m√™me pour la compatibilit√©
        }

        console.log('‚úÖ Validation des donn√©es termin√©e');
        resolve(data);
        
      } catch (decryptError) {
        console.error('‚ùå Erreur lors du d√©chiffrement:', decryptError);
        if (decryptError instanceof Error && decryptError.message.includes('Malformed UTF-8')) {
          reject(new Error('Mot de passe incorrect ou fichier corrompu - impossible de d√©chiffrer les donn√©es'));
        } else {
          reject(decryptError);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement du fichier chiffr√©:', error);
      reject(error);
    }
  }

  /**
   * Charge un fichier JSON simple (donn√©es non chiffr√©es)
   */
  private static loadSimpleJsonData(
    backupFile: any, 
    resolve: (data: any) => void, 
    reject: (error: Error) => void
  ) {
    try {
      console.log('üìÑ Chargement de donn√©es JSON simples...');
      
      // Validation basique des donn√©es
      if (this.validateDataIntegrity(backupFile)) {
        console.log('‚úÖ Donn√©es JSON simples valid√©es');
        resolve(backupFile);
      } else {
        reject(new Error('Format de donn√©es JSON invalide'));
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des donn√©es JSON:', error);
      reject(error);
    }
  }

  /**
   * Charge un ancien format de sauvegarde (compatibilit√©)
   */
  private static async loadLegacyBackup(
    backupFile: any, 
    userPassword: string, 
    resolve: (data: any) => void, 
    reject: (error: Error) => void
  ) {
    try {
      console.log('üîÑ Chargement d\'un ancien format de sauvegarde...');
      
      // Essayer de d√©chiffrer avec l'ancienne m√©thode
      if (backupFile.encrypted) {
        const encryptionKey = this.generateEncryptionKey(userPassword, 'legacy-salt');
        const bytes = CryptoJS.AES.decrypt(backupFile.encrypted, encryptionKey);
        const decryptedString = bytes.toString(CryptoJS.enc.Utf8);
        
        if (decryptedString) {
          const data = JSON.parse(decryptedString);
          if (this.validateDataIntegrity(data)) {
            console.log('‚úÖ Ancien format charg√© avec succ√®s');
            resolve(data);
            return;
          }
        }
      }
      
      // Si pas chiffr√©, essayer directement
      if (backupFile.data) {
        if (this.validateDataIntegrity(backupFile.data)) {
          console.log('‚úÖ Ancien format non chiffr√© charg√©');
          resolve(backupFile.data);
          return;
        }
      }
      
      reject(new Error('Format de sauvegarde ancien non reconnu'));
      
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement de l\'ancien format:', error);
      reject(error);
    }
  }

  /**
   * Charge un format inconnu (derni√®re tentative)
   */
  private static loadUnknownFormat(
    backupFile: any, 
    resolve: (data: any) => void, 
    reject: (error: Error) => void
  ) {
    try {
      console.log('‚ùì Tentative de chargement d\'un format inconnu...');
      
      // Essayer de d√©tecter si c'est des donn√©es utilisateur valides
      if (typeof backupFile === 'object' && backupFile !== null) {
        // V√©rifier si √ßa ressemble √† des donn√©es de retraite
        const hasUserDataStructure = 
          backupFile.personalData || 
          backupFile.retirement || 
          backupFile.savings || 
          backupFile.cashflow ||
          backupFile.expenses ||
          backupFile.taxOptimization;
          
        if (hasUserDataStructure) {
          console.log('‚úÖ Format inconnu mais structure de donn√©es d√©tect√©e');
          resolve(backupFile);
          return;
        }
      }
      
      reject(new Error('Format de fichier non reconnu - v√©rifiez qu\'il s\'agit d\'un fichier de sauvegarde MonPlanRetraite'));
      
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement du format inconnu:', error);
      reject(error);
    }
  }

  // M√©thodes d√©pr√©ci√©es supprim√©es pour la s√©curit√©

  /**
   * Valide l'int√©grit√© des donn√©es
   */
  static validateDataIntegrity(data: any): boolean {
    try {
      if (!data || typeof data !== 'object') {
        return false;
      }

      const requiredFields = ['personal', 'retirement', 'savings', 'cashflow'];
      return requiredFields.every(field => data.hasOwnProperty(field));
    } catch (error) {
      console.error('Erreur lors de la validation:', error);
      return false;
    }
  }

  /**
   * Nettoie les donn√©es sensibles pour l'affichage
   */
  static sanitizeForDisplay(data: any): any {
    try {
      const sanitized = JSON.parse(JSON.stringify(data));
      return sanitized;
    } catch (error) {
      console.error('Erreur lors de la sanitisation:', error);
      return {};
    }
  }

  /**
   * G√©n√®re un hash pour v√©rifier l'int√©grit√©
   */
  static generateHash(data: any): string {
    try {
      const jsonString = JSON.stringify(data);
      return CryptoJS.SHA256(jsonString).toString();
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration du hash:', error);
      return '';
    }
  }

  /**
   * V√©rifie si un hash correspond aux donn√©es
   */
  static verifyHash(data: any, hash: string): boolean {
    try {
      const currentHash = this.generateHash(data);
      return currentHash === hash;
    } catch (error) {
      console.error('Erreur lors de la v√©rification du hash:', error);
      return false;
    }
  }

  /**
   * Nettoie le contenu du fichier pour corriger les probl√®mes d'encodage
   */
  private static cleanFileContent(content: string): string {
    try {
      console.log('üßπ Nettoyage du contenu du fichier...');
      
      // Supprimer les caract√®res BOM et autres caract√®res invisibles
      let cleaned = content.replace(/^\uFEFF/, ''); // BOM UTF-8
      cleaned = cleaned.replace(/^\uFFFE/, ''); // BOM UTF-16 LE
      cleaned = cleaned.replace(/^\uFEFF/, ''); // BOM UTF-16 BE
      
      // Supprimer les caract√®res de contr√¥le non imprimables
      cleaned = cleaned.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '');
      
      // Essayer de r√©parer les guillemets cass√©s
      cleaned = cleaned.replace(/[""]/g, '"');
      cleaned = cleaned.replace(/['']/g, "'");
      
      // Supprimer les espaces en d√©but et fin
      cleaned = cleaned.trim();
      
      console.log('‚úÖ Contenu nettoy√©, nouvelle longueur:', cleaned.length);
      return cleaned;
    } catch (error) {
      console.error('‚ùå Erreur lors du nettoyage:', error);
      return content; // Retourner le contenu original si le nettoyage √©choue
    }
  }

  /**
   * G√©n√®re un ID d'appareil unique
   */
  private static generateDeviceId(): string {
    // Utilise des caract√©ristiques du navigateur pour cr√©er un ID pseudo-unique
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    ctx?.fillText('device-fingerprint', 10, 10);
    const canvasFingerprint = canvas.toDataURL();
    
    const deviceInfo = [
      navigator.userAgent,
      navigator.language,
      screen.width + 'x' + screen.height,
      new Date().getTimezoneOffset(),
      canvasFingerprint
    ].join('|');
    
    return CryptoJS.SHA256(deviceInfo).toString().substring(0, 16);
  }
}