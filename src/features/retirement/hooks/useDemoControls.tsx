import { useState, useEffect, useCallback } from 'react';
import { useDynamicTheme } from './useDynamicTheme';
import { useAdaptiveLayout } from './useAdaptiveLayout';

// Types pour les contr√¥les de d√©monstration
export interface DemoControls {
  // Contr√¥les de th√®mes
  isRotating: boolean;
  startThemeRotation: () => void;
  stopThemeRotation: () => void;
  
  // Contr√¥les de particules
  showParticles: boolean;
  toggleParticles: () => void;
  particleIntensity: number;
  setParticleIntensity: (intensity: number) => void;
  
  // Contr√¥les de physique
  showPhysics: boolean;
  togglePhysics: () => void;
  physicsGravity: boolean;
  setPhysicsGravity: (enabled: boolean) => void;
  physicsFriction: number;
  setPhysicsFriction: (friction: number) => void;
  
  // Contr√¥les de performance
  performanceMode: boolean;
  togglePerformanceMode: () => void;
  
  // √âtat global
  isDemoMode: boolean;
  toggleDemoMode: () => void;
}

// Configuration des contr√¥les par d√©faut
const DEFAULT_CONTROLS = {
  showParticles: true,
  showPhysics: true,
  particleIntensity: 0.7,
  physicsGravity: true,
  physicsFriction: 0.8,
  performanceMode: false,
  isDemoMode: false
};

export const useDemoControls = (): DemoControls => {
  // Hooks existants
  const { 
    currentTheme, 
    isRotating, 
    startThemeRotation: startThemeRotationOriginal 
  } = useDynamicTheme();
  
  const { currentLayout, screenContext } = useAdaptiveLayout();

  // √âtats locaux pour les contr√¥les
  const [showParticles, setShowParticles] = useState(DEFAULT_CONTROLS.showParticles);
  const [showPhysics, setShowPhysics] = useState(DEFAULT_CONTROLS.showPhysics);
  const [particleIntensity, setParticleIntensity] = useState(DEFAULT_CONTROLS.particleIntensity);
  const [physicsGravity, setPhysicsGravity] = useState(DEFAULT_CONTROLS.physicsGravity);
  const [physicsFriction, setPhysicsFriction] = useState(DEFAULT_CONTROLS.physicsFriction);
  const [performanceMode, setPerformanceMode] = useState(DEFAULT_CONTROLS.performanceMode);
  const [isDemoMode, setIsDemoMode] = useState(DEFAULT_CONTROLS.isDemoMode);

  // Charger les pr√©f√©rences depuis localStorage
  useEffect(() => {
    const savedControls = localStorage.getItem('demo-controls');
    if (savedControls) {
      try {
        const parsed = JSON.parse(savedControls);
        setShowParticles(parsed.showParticles ?? DEFAULT_CONTROLS.showParticles);
        setShowPhysics(parsed.showPhysics ?? DEFAULT_CONTROLS.showPhysics);
        setParticleIntensity(parsed.particleIntensity ?? DEFAULT_CONTROLS.particleIntensity);
        setPhysicsGravity(parsed.physicsGravity ?? DEFAULT_CONTROLS.physicsGravity);
        setPhysicsFriction(parsed.physicsFriction ?? DEFAULT_CONTROLS.physicsFriction);
        setPerformanceMode(parsed.performanceMode ?? DEFAULT_CONTROLS.performanceMode);
        setIsDemoMode(parsed.isDemoMode ?? DEFAULT_CONTROLS.isDemoMode);
      } catch (error) {
        console.warn('Erreur lors du chargement des contr√¥les de d√©mo:', error);
      }
    }
  }, []);

  // Sauvegarder les pr√©f√©rences dans localStorage
  const saveControls = useCallback(() => {
    const controls = {
      showParticles,
      showPhysics,
      particleIntensity,
      physicsGravity,
      physicsFriction,
      performanceMode,
      isDemoMode
    };
    localStorage.setItem('demo-controls', JSON.stringify(controls));
  }, [showParticles, showPhysics, particleIntensity, physicsGravity, physicsFriction, performanceMode, isDemoMode]);

  // Sauvegarder automatiquement lors des changements
  useEffect(() => {
    saveControls();
  }, [saveControls]);

  // Contr√¥les de th√®mes
  const startThemeRotation = useCallback(() => {
    startThemeRotationOriginal();
    console.log('üöÄ Rotation des th√®mes d√©marr√©e via les contr√¥les de d√©mo');
  }, [startThemeRotationOriginal]);

  const stopThemeRotation = useCallback(() => {
    startThemeRotationOriginal(); // Cette fonction fait d√©j√† le toggle
    console.log('‚èπÔ∏è Rotation des th√®mes arr√™t√©e via les contr√¥les de d√©mo');
  }, [startThemeRotationOriginal]);

  // Contr√¥les de particules
  const toggleParticles = useCallback(() => {
    setShowParticles(prev => {
      const newValue = !prev;
      console.log(`‚ú® Particules ${newValue ? 'affich√©es' : 'masqu√©es'}`);
      return newValue;
    });
  }, []);

  const setParticleIntensityValue = useCallback((intensity: number) => {
    setParticleIntensity(intensity);
    console.log(`üéØ Intensit√© des particules r√©gl√©e √†: ${intensity}`);
  }, []);

  // Contr√¥les de physique
  const togglePhysics = useCallback(() => {
    setShowPhysics(prev => {
      const newValue = !prev;
      console.log(`‚ö° Physique ${newValue ? 'activ√©e' : 'd√©sactiv√©e'}`);
      return newValue;
    });
  }, []);

  const setPhysicsGravityValue = useCallback((enabled: boolean) => {
    setPhysicsGravity(enabled);
    console.log(`üåç Gravit√© ${enabled ? 'activ√©e' : 'd√©sactiv√©e'}`);
  }, []);

  const setPhysicsFrictionValue = useCallback((friction: number) => {
    setPhysicsFriction(friction);
    console.log(`üîÑ Friction r√©gl√©e √†: ${friction}`);
  }, []);

  // Contr√¥le de performance
  const togglePerformanceMode = useCallback(() => {
    setPerformanceMode(prev => {
      const newValue = !prev;
      console.log(`‚ö° Mode performance ${newValue ? 'activ√©' : 'd√©sactiv√©'}`);
      
      // Ajuster automatiquement les param√®tres selon le mode performance
      if (newValue) {
        // Mode performance : r√©duire les effets
        setShowParticles(false);
        setShowPhysics(false);
        setParticleIntensity(0.3);
        setPhysicsFriction(0.9);
      } else {
        // Mode normal : restaurer les param√®tres
        setShowParticles(true);
        setShowPhysics(true);
        setParticleIntensity(0.7);
        setPhysicsFriction(0.8);
      }
      
      return newValue;
    });
  }, []);

  // Mode d√©mo global
  const toggleDemoMode = useCallback(() => {
    setIsDemoMode(prev => {
      const newValue = !prev;
      console.log(`üé≠ Mode d√©mo ${newValue ? 'activ√©' : 'd√©sactiv√©'}`);
      
      if (newValue) {
        // Activer tous les effets en mode d√©mo
        setShowParticles(true);
        setShowPhysics(true);
        setParticleIntensity(1.0);
        setPhysicsGravity(true);
        setPhysicsFriction(0.6);
        setPerformanceMode(false);
      }
      
      return newValue;
    });
  }, []);

  // Adaptation automatique selon le contexte d'√©cran
  useEffect(() => {
    if (screenContext.size === 'mobile' && !performanceMode) {
      // Sur mobile, r√©duire automatiquement les effets pour la performance
      setShowParticles(false);
      setShowPhysics(false);
      setParticleIntensity(0.4);
      console.log('üì± Adaptation automatique pour mobile : effets r√©duits');
    }
  }, [screenContext.size, performanceMode]);

  // Adaptation selon la vitesse de connexion
  useEffect(() => {
    if (screenContext.connectionSpeed === 'slow' && !performanceMode) {
      setShowParticles(false);
      setShowPhysics(false);
      console.log('üêå Adaptation automatique pour connexion lente : effets r√©duits');
    }
  }, [screenContext.connectionSpeed, performanceMode]);

  return {
    // Contr√¥les de th√®mes
    isRotating,
    startThemeRotation,
    stopThemeRotation,
    
    // Contr√¥les de particules
    showParticles,
    toggleParticles,
    particleIntensity,
    setParticleIntensity: setParticleIntensityValue,
    
    // Contr√¥les de physique
    showPhysics,
    togglePhysics,
    physicsGravity,
    setPhysicsGravity: setPhysicsGravityValue,
    physicsFriction,
    setPhysicsFriction: setPhysicsFrictionValue,
    
    // Contr√¥les de performance
    performanceMode,
    togglePerformanceMode,
    
    // √âtat global
    isDemoMode,
    toggleDemoMode
  };
};
