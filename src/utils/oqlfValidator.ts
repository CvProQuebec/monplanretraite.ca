// Validateur OQLF pour v√©rifier la conformit√© des textes fran√ßais
// selon les normes de l'Office Qu√©b√©cois de la langue fran√ßaise

export interface OQLFValidationResult {
  text: string;
  rule: string;
  status: 'valid' | 'invalid' | 'warning';
  message: string;
  suggestion?: string;
}

export class OQLFValidator {
  private static rules = {
    // R√®gle 1: Seulement le premier mot d'un titre porte la majuscule
    titleCapitalization: {
      pattern: /^[A-Z√Ä√Ç√Ñ√â√à√ä√ã√è√é√î√ô√õ√ú≈∏√á][a-z√†√¢√§√©√®√™√´√Ø√Æ√¥√π√ª√º√ø√ß\s'-]+$/,
      message: 'Seulement le premier mot d\'un titre doit porter la majuscule',
      suggestion: 'Exemple: "Vue d\'ensemble" au lieu de "Vue D\'ensemble"'
    },

    // R√®gle 2: Espace fixe devant les symboles (: $ %)
    spaceBeforeSymbols: {
      pattern: /(?<=\S)\s*[:$%]/g,
      message: 'Espace fixe requis devant les symboles (: $ %)',
      suggestion: 'Exemple: "Progression : 35 %" au lieu de "Progression: 35%"'
    },

    // R√®gle 3: Aucune espace devant (; ! ?)
    noSpaceBeforePunctuation: {
      pattern: /\s+[;!?]/g,
      message: 'Aucune espace ne doit pr√©c√©der (; ! ?)',
      suggestion: 'Exemple: "Bonjour!" au lieu de "Bonjour !"'
    },

    // R√®gle 4: Format des montants d'argent "1 234,56 $"
    moneyFormat: {
      pattern: /\d{1,3}(?:\s\d{3})*(?:,\d{2})?\s\$/g,
      message: 'Format des montants: espace pour milliers, virgule pour d√©cimales, espace avant $',
      suggestion: 'Exemple: "1 234,56 $" au lieu de "1234.56$"'
    },

    // R√®gle 5: Format des heures "13 h 5"
    timeFormat: {
      pattern: /\d{1,2}\s+h\s+\d{1,2}/g,
      message: 'Format des heures: espace avant et apr√®s "h"',
      suggestion: 'Exemple: "13 h 5" au lieu de "13h5"'
    }
  };

  /**
   * Valide un texte selon les r√®gles OQLF
   */
  static validateText(text: string, context: 'title' | 'content' | 'button' = 'content'): OQLFValidationResult[] {
    const results: OQLFValidationResult[] = [];

    // Validation de la capitalisation des titres
    if (context === 'title') {
      const words = text.split(' ');
      if (words.length > 1) {
        for (let i = 1; i < words.length; i++) {
          const word = words[i];
          // Ignorer les mots qui commencent par une apostrophe ou un tiret
          if (word.startsWith("'") || word.startsWith('-')) continue;
          
          if (/^[A-Z√Ä√Ç√Ñ√â√à√ä√ã√è√é√î√ô√õ√ú≈∏√á]/.test(word)) {
            results.push({
              text,
              rule: 'Capitalisation des titres',
              status: 'invalid',
              message: `Le mot "${word}" ne devrait pas commencer par une majuscule dans un titre`,
              suggestion: 'Seulement le premier mot du titre doit porter la majuscule'
            });
          }
        }
      }
    }

    // Validation des espaces devant les symboles
    const spaceBeforeSymbols = text.match(this.rules.spaceBeforeSymbols);
    if (spaceBeforeSymbols) {
      results.push({
        text,
        rule: 'Espace devant les symboles',
        status: 'invalid',
        message: 'Espace fixe requis devant (: $ %)',
        suggestion: 'Ajouter un espace avant les symboles'
      });
    }

    // Validation des espaces avant la ponctuation
    const noSpaceBeforePunctuation = text.match(this.rules.noSpaceBeforePunctuation);
    if (noSpaceBeforePunctuation) {
      results.push({
        text,
        rule: 'Espace avant ponctuation',
        status: 'invalid',
        message: 'Aucune espace ne doit pr√©c√©der (; ! ?)',
        suggestion: 'Supprimer l\'espace avant la ponctuation'
      });
    }

    // Validation du format des montants
    const moneyMatches = text.match(/\$\d+/g);
    if (moneyMatches) {
      results.push({
        text,
        rule: 'Format des montants',
        status: 'warning',
        message: 'V√©rifier le format des montants selon OQLF',
        suggestion: 'Format recommand√©: "1 234,56 $" (espace pour milliers, virgule pour d√©cimales, espace avant $)'
      });
    }

    // Validation du format des heures
    const timeMatches = text.match(/\d+h\d+/g);
    if (timeMatches) {
      results.push({
        text,
        rule: 'Format des heures',
        status: 'warning',
        message: 'V√©rifier le format des heures selon OQLF',
        suggestion: 'Format recommand√©: "13 h 5" (espace avant et apr√®s "h")'
      });
    }

    return results;
  }

  /**
   * Valide un objet contenant des textes
   */
  static validateObject(obj: any, context: string = 'content'): OQLFValidationResult[] {
    const results: OQLFValidationResult[] = [];

    const validateRecursive = (obj: any, path: string = '') => {
      if (typeof obj === 'string') {
        const textResults = this.validateText(obj, context as any);
        textResults.forEach(result => {
          result.text = `${path}: ${result.text}`;
          results.push(result);
        });
      } else if (typeof obj === 'object' && obj !== null) {
        for (const [key, value] of Object.entries(obj)) {
          const newPath = path ? `${path}.${key}` : key;
          validateRecursive(value, newPath);
        }
      }
    };

    validateRecursive(obj);
    return results;
  }

  /**
   * G√©n√®re un rapport de validation OQLF
   */
  static generateReport(validationResults: OQLFValidationResult[]): string {
    if (validationResults.length === 0) {
      return '‚úÖ Tous les textes sont conformes aux normes OQLF !';
    }

    const invalidCount = validationResults.filter(r => r.status === 'invalid').length;
    const warningCount = validationResults.filter(r => r.status === 'warning').length;

    let report = `üìã Rapport de validation OQLF\n`;
    report += `================================\n\n`;
    report += `R√©sum√©:\n`;
    report += `- ‚ùå Erreurs: ${invalidCount}\n`;
    report += `- ‚ö†Ô∏è Avertissements: ${warningCount}\n\n`;

    if (invalidCount > 0) {
      report += `‚ùå ERREURS √Ä CORRIGER:\n`;
      report += `======================\n`;
      validationResults
        .filter(r => r.status === 'invalid')
        .forEach((result, index) => {
          report += `${index + 1}. ${result.rule}\n`;
          report += `   Texte: "${result.text}"\n`;
          report += `   Message: ${result.message}\n`;
          if (result.suggestion) {
            report += `   Suggestion: ${result.suggestion}\n`;
          }
          report += `\n`;
        });
    }

    if (warningCount > 0) {
      report += `‚ö†Ô∏è AVERTISSEMENTS:\n`;
      report += `==================\n`;
      validationResults
        .filter(r => r.status === 'warning')
        .forEach((result, index) => {
          report += `${index + 1}. ${result.rule}\n`;
          report += `   Texte: "${result.text}"\n`;
          report += `   Message: ${result.message}\n`;
          if (result.suggestion) {
            report += `   Suggestion: ${result.suggestion}\n`;
          }
          report += `\n`;
        });
    }

    return report;
  }

  /**
   * V√©rifie la conformit√© OQLF des textes principaux de l'application
   */
  static validateApplicationTexts(): OQLFValidationResult[] {
    const applicationTexts = {
      'Page Accueil': {
        'Titre principal': 'Votre retraite, votre histoire',
        'Sous-titre': 'Chaque personne m√©rite de planifier son avenir avec dignit√©, peu importe son niveau d\'√©pargne actuel.',
        'Notre engagement': 'Notre engagement',
        'Ce que nous reconnaissons': 'Ce que nous reconnaissons :',
        'Le stress financier': 'Le stress financier peut √™tre angoissant',
        'Le sentiment d\'abandon': 'Le sentiment d\'abandon face √† la complexit√©',
        'Les barri√®res √©conomiques': 'Les barri√®res √©conomiques traditionnelles',
        'Notre promesse': 'Notre promesse :',
        'Accessibilit√© pour tous': 'Accessibilit√© pour tous, pas seulement les fortun√©s',
        'Bienveillance': 'Bienveillance sans jugement ni pression',
        'Accompagnement': 'Accompagnement personnalis√© selon vos moyens',
        'Vue d\'ensemble': 'Vue d\'ensemble et progression',
        'Votre situation': 'Votre situation, nos ressources',
        'Travailler avec ce qu\'on a': 'Travailler avec ce qu\'on a',
        'Votre progr√®s': 'Votre progr√®s, nos f√©licitations',
        'Vous n\'√™tes plus seul(e)': 'Vous n\'√™tes plus seul(e)',
        'Chaque petit pas': 'Chaque petit pas compte vers votre s√©curit√© financi√®re. Commencez votre voyage avec bienveillance.',
        'Commencer maintenant': 'Commencer maintenant'
      },
      'Page Mon Profil': {
        'Titre': 'Mon profil',
        'Sous-titre': 'Votre situation est unique, comme vous. Nous travaillons avec vos moyens r√©els, pas avec des r√™ves inaccessibles.',
        'Votre progression': 'Votre progression',
        'Excellent travail': 'Excellent travail ! Vous avez compl√©t√©',
        'Informations personnelles': 'Informations personnelles',
        'Chaque d√©tail compte': 'Chaque d√©tail compte pour personnaliser votre plan',
        'Nom complet': 'Nom complet',
        'Votre nom': 'Votre nom',
        '√Çge': '√Çge',
        'Votre √¢ge': 'Votre √¢ge',
        'Situation familiale': 'Situation familiale',
        '√âtat de sant√©': '√âtat de sant√©',
        'Lieu de r√©sidence': 'Lieu de r√©sidence',
        'Situation financi√®re': 'Situation financi√®re',
        'Soyez honn√™te': 'Soyez honn√™te, nous ne jugeons pas. Chaque situation m√©rite respect.',
        'Objectif de retraite': 'Objectif de retraite',
        '√âpargne actuelle': '√âpargne actuelle',
        'Chaque dollar compte': 'Chaque dollar compte ! Votre √©pargne actuelle est un excellent d√©but.',
        'Revenus mensuels': 'Revenus mensuels',
        'F√©licitations pour chaque √©tape': 'F√©licitations pour chaque √©tape !',
        'Vous construisez': 'Vous construisez votre avenir financier avec courage et d√©termination. Chaque information que vous partagez nous aide √† mieux vous accompagner.',
        'Retour √† l\'accueil': 'Retour √† l\'accueil',
        'Continuer vers ma retraite': 'Continuer vers ma retraite'
      }
    };

    return this.validateObject(applicationTexts, 'title');
  }
}

export default OQLFValidator;
